"scr_XMLNabavniNalog As screen.'autoLayout_HeaderFooter_ver1.0'":
    Fill: =RGBA(234, 83, 109, 1)
    LoadingSpinnerColor: =App.Theme.Colors.Primary
    OnVisible: |
        =Set(
            isLoading,
            true
        );
        If(
            !IsBlank(SelectedFile),
            IfError(
                UpdateContext(
                    {
                        xmlData: (ParseJSON(
                            GetXml.Run(
                                SelectedFile,
                                SelectedQueue
                            ).response
                        ).Purchase_Header )
                    }
                ),
                Notify(
                    "Gre≈°ka u obradi.",
                    NotificationType.Error,
                    2000
                )
            )
        );
        UpdateContext(
            {
                header: {
                    Amount: Text(xmlData.Amount),
                    Amount_Including_VAT: Text(xmlData.Amount_Including_VAT),
                    Area: Text(xmlData.Area),
                    'Buy-from_Address': Text(xmlData.'Buy-from_Address'),
                    'Buy-from_Address_2': Text(xmlData.'Buy-from_Address_2'),
                    'Buy-from_City': Text(xmlData.'Buy-from_City'),
                    'Buy-from_Contact': Text(xmlData.'Buy-from_Contact'),
                    'Buy-from_Contact_No.': Text(xmlData.'Buy-from_Contact_No.'),
                    'Buy-from_Country_Code': Text(xmlData.'Buy-from_Country_Code'),
                    'Buy-from_County': Text(xmlData.'Buy-from_County'),
                    'Buy-from_Post_Code': Text(xmlData.'Buy-from_Post_Code'),
                    'Buy-from_Vendor_Name': Text(xmlData.'Buy-from_Vendor_Name'),
                    'Buy-from_Vendor_Name_2': Text(xmlData.'Buy-from_Vendor_Name_2'),
                    'Buy-from_Vendor_No.': Text(xmlData.'Buy-from_Vendor_No.'),
                    Campaign_No: Text(xmlData.Campaign_No),
                    Currency_Code: Text(xmlData.Currency_Code),
                    Document_Date: Text(xmlData.Document_Date),
                    Document_Type: Text(xmlData.Document_Type),
                    Due_Date: Text(xmlData.Due_Date),
                    Expected_Receipt_Date: Text(xmlData.Expected_Receipt_Date),
                    'Gen._Bus._Posting_Group': Text(xmlData.'Gen._Bus._Posting_Group'),
                    Language_Code: Text(xmlData.Language_Code),
                    Location_Code: Text(xmlData.Location_Code),
                    No: Text(xmlData.'No.'),
                    Order_Date: Text(xmlData.Order_Date),
                    Promised_Receipt_Date: Text(xmlData.Promised_Receipt_Date),
                    Purchaser_Code: Text(xmlData.Purchaser_Code),
                    Requested_Receipt_Date: Text(xmlData.Requested_Receipt_Date),
                    Shipment_Method_Code: Text(xmlData.Shipment_Method_Code),
                    'Ship-to_Address': Text(xmlData.'Ship-to_Address'),
                    'Ship-to_Address_2': Text(xmlData.'Ship-to_Address_2'),
                    'Ship-to_City': Text(xmlData.'Ship-to_City'),
                    'Ship-to_Code': Text(xmlData.'Ship-to_Code'),
                    'Ship-to_Contact': Text(xmlData.'Ship-to_Contact'),
                    'Ship-to_Country_Code': Text(xmlData.'Ship-to_Country_Code'),
                    'Ship-to_County': Text(xmlData.'Ship-to_County'),
                    'Ship-to_Name': Text(xmlData.'Ship-to_Name'),
                    'Ship-to_Name_2': Text(xmlData.'Ship-to_Name_2'),
                    'Ship-to_Post_Code': Text(xmlData.'Ship-to_Post_Code'),
                    Status: Text(xmlData.Status),
                    Tax_Area_Code: Text(xmlData.Tax_Area_Code),
                    Transport_Method: Text(xmlData.Transport_Method),
                    'VAT_Bus._Posting_Group': Text(xmlData.'VAT_Bus._Posting_Group'),
                    VAT_Country_Code: Text(xmlData.VAT_Country_Code),
                    'VAT_Registration_No.': Text(xmlData.'VAT_Registration_No.'),
                    'Vendor_Invoice_No.': Text(xmlData.'Vendor_Invoice_No.'),
                    'Vendor_Order_No.': Text(xmlData.'Vendor_Order_No.'),
                    Vendor_Posting_Group: Text(xmlData.Vendor_Posting_Group),
                    'Vendor_Shipment_No.': Text(xmlData.'Vendor_Shipment_No.')
                }
            }
        );
        IfError(
            ForAll(
                xmlData.Purchase_Line As line,
                Collect(
                    colLines,
                    {
                        'Buy-from_Vendor_No.': Text(line.'Buy-from_Vendor_No.'),
                        Description: Text(line.Description),
                        Document_No: Text(line.Document_No),
                        Document_Type: Text(line.Document_Type),
                        Item_No: Text(line.Item_No),
                        Line_No: Text(line.Line_No),
                        Location_Code: Text(line.Location_Code),
                        Posting_Group: Text(line.Posting_Group),
                        Quantity: Text(line.Quantity),
                        Type: Text(line.Type),
                        Unit_Of_Measure: Text(line.Unit_Of_Measure)
                    }
                );
                IfError(
                    ForAll(
                        line.Res_Entry As entry,
                        Collect(
                            colEntries,
                            {
                                Created_By: Text(entry.Created_By),
                                Creation_Date: Text(entry.Creation_Date),
                                Entry_No: Text(entry.Entry_No),
                                Exp_Date: Text(entry.Exp_Date),
                                Exp_Receipt_Date: Text(entry.Exp_Receipt_Date),
                                Item_No: Text(entry.Item_No),
                                Item_Tracking: Text(entry.Item_Tracking),
                                LOT_No: Text(entry.LOT_No),
                                Location_Code: Text(entry.Location_Code),
                                Positive: Text(entry.Positive),
                                'Qty-to-Handle_Base': Text(entry.'Qty-to-Handle_Base'),
                                'Qty-to-Invoice_Base': Text(entry.'Qty-to-Invoice_Base'),
                                Quantity: Text(entry.Quantity),
                                Quantity_Base: Text(entry.Quantity_Base),
                                Quantity_Completed: Value(entry.Quantity_Completed),
                                Quantity_NewLOT: Value(entry.Quantity_NewLOT),
                                Res_Status: Text(entry.Res_Status),
                                Shipment_Date: Text(entry.Shipment_Date),
                                Source_ID: Text(entry.Source_ID),
                                Source_Ref_No: Text(entry.Source_Ref_No),
                                Source_SubType: Text(entry.Source_SubType),
                                Source_Type: Text(entry.Source_Type)
                            }
                        )
                    ),
                    Collect(
                        colEntries,
                        {
                            Created_By: Text(line.Res_Entry.Created_By),
                            Creation_Date: Text(line.Res_Entry.Creation_Date),
                            Entry_No: Text(line.Res_Entry.Entry_No),
                            Exp_Date: Text(line.Res_Entry.Exp_Date),
                            Exp_Receipt_Date: Text(line.Res_Entry.Exp_Receipt_Date),
                            Item_No: Text(line.Res_Entry.Item_No),
                            Item_Tracking: Text(line.Res_Entry.Item_Tracking),
                            LOT_No: Text(line.Res_Entry.LOT_No),
                            Location_Code: Text(line.Res_Entry.Location_Code),
                            Positive: Text(line.Res_Entry.Positive),
                            'Qty-to-Handle_Base': Text(line.Res_Entry.'Qty-to-Handle_Base'),
                            'Qty-to-Invoice_Base': Text(line.Res_Entry.'Qty-to-Invoice_Base'),
                            Quantity: Text(line.Res_Entry.Quantity),
                            Quantity_Base: Text(line.Res_Entry.Quantity_Base),
                            Quantity_Completed: Value(line.Res_Entry.Quantity_Completed),
                            Quantity_NewLOT: Value(line.Res_Entry.Quantity_NewLOT),
                            Res_Status: Text(line.Res_Entry.Res_Status),
                            Shipment_Date: Text(line.Res_Entry.Shipment_Date),
                            Source_ID: Text(line.Res_Entry.Source_ID),
                            Source_Ref_No: Text(line.Res_Entry.Source_Ref_No),
                            Source_SubType: Text(line.Res_Entry.Source_SubType),
                            Source_Type: Text(line.Res_Entry.Source_Type)
                        }
                    )
                )
            ),
            Collect(
                colLines,
                {
                    'Buy-from_Vendor_No.': Text(xmlData.Purchase_Line.'Buy-from_Vendor_No.'),
                    Description: Text(xmlData.Purchase_Line.Description),
                    Document_No: Text(xmlData.Purchase_Line.Document_No),
                    Document_Type: Text(xmlData.Purchase_Line.Document_Type),
                    Item_No: Text(xmlData.Purchase_Line.Item_No),
                    Line_No: Text(xmlData.Purchase_Line.Line_No),
                    Location_Code: Text(xmlData.Purchase_Line.Location_Code),
                    Posting_Group: Text(xmlData.Purchase_Line.Posting_Group),
                    Quantity: Text(xmlData.Purchase_Line.Quantity),
                    Type: Text(xmlData.Purchase_Line.Type),
                    Unit_Of_Measure: Text(xmlData.Purchase_Line.Unit_Of_Measure)
                }
            );
            IfError(
                ForAll(
                    xmlData.Purchase_Line.Res_Entry As entry,
                    Collect(
                        colEntries,
                        {
                            Created_By: Text(entry.Created_By),
                            Creation_Date: Text(entry.Creation_Date),
                            Entry_No: Text(entry.Entry_No),
                            Exp_Date: Text(entry.Exp_Date),
                            Exp_Receipt_Date: Text(entry.Exp_Receipt_Date),
                            Item_No: Text(entry.Item_No),
                            Item_Tracking: Text(entry.Item_Tracking),
                            LOT_No: Text(entry.LOT_No),
                            Location_Code: Text(entry.Location_Code),
                            Positive: Text(entry.Positive),
                            'Qty-to-Handle_Base': Text(entry.'Qty-to-Handle_Base'),
                            'Qty-to-Invoice_Base': Text(entry.'Qty-to-Invoice_Base'),
                            Quantity: Text(entry.Quantity),
                            Quantity_Base: Text(entry.Quantity_Base),
                            Quantity_Completed: Value(entry.Quantity_Completed),
                            Quantity_NewLOT: Value(entry.Quantity_NewLOT),
                            Res_Status: Text(entry.Res_Status),
                            Shipment_Date: Text(entry.Shipment_Date),
                            Source_ID: Text(entry.Source_ID),
                            Source_Ref_No: Text(entry.Source_Ref_No),
                            Source_SubType: Text(entry.Source_SubType),
                            Source_Type: Text(entry.Source_Type)
                        }
                    )
                ),
                Collect(
                    colEntries,
                    {
                        Created_By: Text(xmlData.Purchase_Line.Res_Entry.Created_By),
                        Creation_Date: Text(xmlData.Purchase_Line.Res_Entry.Creation_Date),
                        Entry_No: Text(xmlData.Purchase_Line.Res_Entry.Entry_No),
                        Exp_Date: Text(xmlData.Purchase_Line.Res_Entry.Exp_Date),
                        Exp_Receipt_Date: Text(xmlData.Purchase_Line.Res_Entry.Exp_Receipt_Date),
                        Item_No: Text(xmlData.Purchase_Line.Res_Entry.Item_No),
                        Item_Tracking: Text(xmlData.Purchase_Line.Res_Entry.Item_Tracking),
                        LOT_No: Text(xmlData.Purchase_Line.Res_Entry.LOT_No),
                        Location_Code: Text(xmlData.Purchase_Line.Res_Entry.Location_Code),
                        Positive: Text(xmlData.Purchase_Line.Res_Entry.Positive),
                        'Qty-to-Handle_Base': Text(xmlData.Purchase_Line.Res_Entry.'Qty-to-Handle_Base'),
                        'Qty-to-Invoice_Base': Text(xmlData.Purchase_Line.Res_Entry.'Qty-to-Invoice_Base'),
                        Quantity: Text(xmlData.Purchase_Line.Res_Entry.Quantity),
                        Quantity_Base: Text(xmlData.Purchase_Line.Res_Entry.Quantity_Base),
                        Quantity_Completed: Value(xmlData.Purchase_Line.Res_Entry.Quantity_Completed),
                        Quantity_NewLOT: Value(xmlData.Purchase_Line.Res_Entry.Quantity_NewLOT),
                        Res_Status: Text(xmlData.Purchase_Line.Res_Entry.Res_Status),
                        Shipment_Date: Text(xmlData.Purchase_Line.Res_Entry.Shipment_Date),
                        Source_ID: Text(xmlData.Purchase_Line.Res_Entry.Source_ID),
                        Source_Ref_No: Text(xmlData.Purchase_Line.Res_Entry.Source_Ref_No),
                        Source_SubType: Text(xmlData.Purchase_Line.Res_Entry.Source_SubType),
                        Source_Type: Text(xmlData.Purchase_Line.Res_Entry.Source_Type)
                    }
                )
            )
        );
        Set(
            isLoading,
            false
        );
        If(
            SelectedQueue = ReadyForProcessing,
            ChangeXmlStatus.Run(
                SelectedFile,
                SelectedQueue,
                InProgress
            );
            Set(
                SelectedQueue,
                InProgress
            )
        );

    vrt_Nab As groupContainer.verticalAutoLayoutContainer:
        Fill: =RGBA(245, 245, 245, 1)
        Height: =Parent.Height
        LayoutAlignItems: =LayoutAlignItems.Stretch
        LayoutDirection: =LayoutDirection.Vertical
        LayoutJustifyContent: =LayoutJustifyContent.SpaceBetween
        LayoutMode: =LayoutMode.Auto
        RadiusBottomLeft: =4
        RadiusBottomRight: =4
        RadiusTopLeft: =4
        RadiusTopRight: =4
        Width: =Parent.Width
        ZIndex: =1

        com_NabHeader As com_Header:
            LayoutMinHeight: =640
            LayoutMinWidth: =App.Width
            Title: ="NABAVNI NALOG"

        vrt_NabBody As groupContainer.horizontalAutoLayoutContainer:
            AlignInContainer: =AlignInContainer.SetByContainer
            BorderColor: =RGBA(214, 221, 224, 1)
            BorderThickness: =0.5
            Height: =40
            LayoutAlignItems: =LayoutAlignItems.Stretch
            LayoutDirection: =LayoutDirection.Vertical
            LayoutGap: =5
            LayoutJustifyContent: =LayoutJustifyContent.SpaceBetween
            LayoutMinHeight: =100
            LayoutMinWidth: =App.Width
            LayoutMode: =LayoutMode.Auto
            LayoutOverflowY: =LayoutOverflow.Scroll
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            RadiusBottomLeft: =4
            RadiusBottomRight: =4
            RadiusTopLeft: =4
            RadiusTopRight: =4
            Visible: =!isLoading
            Width: =Max(App.Width, App.MinScreenWidth)
            ZIndex: =2

            com_NabHeaderData As com_HeaderData:
                LayoutMinHeight: =640
                LayoutMinWidth: =350
                Line1Label: |-
                    ="Broj naloga:"
                Line1Value: =header.No
                Line2Label: |-
                    ="Datum dokumenta:"
                Line2Value: =header.Document_Date
                Line3Label: |-
                    ="Datum narud≈æbe:"
                Line3Value: =header.Location_Code & " " & header.'Ship-to_Name'
                Line4Label: |-
                    ="Nabavka u:"
                Line4Value: =header.Location_Code & " " & header.'Ship-to_Name'
                Line5Label: |-
                    ="Dobavljaƒç:"
                Line5Value: =header.'Buy-from_Vendor_No.' & " " & header.'Buy-from_Vendor_Name'
                Visible: =wizardStep = 1

            com_NabGalleries As com_Galleries:
                AddNew: =true
                EntryLabels: |-
                    ={Line1: "Broj artikla:", Line2: "Rok trajanja:", Line3: "LOT:", Line4: "Rezervisana kol.:", Line5: "Potrebna kol.:"}
                FillPortions: =1
                LayoutMinHeight: =250
                LayoutMinWidth: =350
                LineLabels: |-
                    ={Line1: "Broj artikla:", Line2: "Kategorija artikla:", Line3: "Naziv artikla:", Line4: "Koliƒçina:", Line5: "Jedinica mjere:"}
                LineValuePosition: |-
                    ={Item_No: 0, Posting_Group: 1, Inv_Posting_Group: Blank(), Description: 2, Quantity: 3, Unit_Of_Measure: 4, 'Qty-to_Ship': Blank()}
                LineValueVisibility: |-
                    ={Line_No: false, Item_No: true, Posting_Group: true, Inv_Posting_Group: false, Description: true, Quantity: true, Unit_Of_Measure: true, 'Qty-to_Ship': false}
                Visible: =true
                ZIndex: =5

        spn_NabLoader As Spinner:
            Appearance: ='Spinner.Appearance'.Primary
            BasePaletteColor: =
            DisplayMode: =DisplayMode.Edit
            FillPortions: =1
            FontColor: =
            Height: =200
            Label: ="Uƒçitavam dokument..."
            LabelPosition: ='Spinner.LabelPosition'.Below
            LayoutMinHeight: =200
            LayoutMinWidth: =300
            SpinnerSize: ='Spinner.SpinnerSize'.Huge
            Visible: =isLoading
            Width: =200
            X: =0
            Y: =0
            ZIndex: =3

        com_NabFooter As com_Footer:
            JSONData: |-
                ="{" & Char(34) & "Purchase_Header" & Char(34) & ": " & JSON(
                    AddColumns(
                        header,
                        Purchase_Line,
                        ForAll(
                            colLines As line,
                            AddColumns(
                                line,
                                Res_Entry,
                                Filter(
                                    colEntries,
                                    ThisRecord.Source_Ref_No = line.Line_No
                                )
                            )
                        )
                    )
                ) & "}"
            LayoutMinHeight: =640
            ZIndex: =4

    com_NabModal As com_Modal:
        IsNabavniNalog: =true
        LineId: =com_NabGalleries.SelectedLine.Line_No
        Quantity: =com_NabGalleries.SelectedEntry.Quantity
        QuantityCompleted: =com_NabGalleries.SelectedEntry.Quantity_Completed
        QuantityNewLOT: =com_NabGalleries.SelectedEntry.Quantity_NewLOT
        ResEntryId: =com_NabGalleries.SelectedEntry.Entry_No
        Visible: =isModalOpen
        ZIndex: =2

