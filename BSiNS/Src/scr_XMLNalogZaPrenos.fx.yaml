"scr_XMLNalogZaPrenos As screen.'autoLayout_HeaderFooter_ver1.0'":
    Fill: =RGBA(234, 83, 109, 1)
    LoadingSpinnerColor: =App.Theme.Colors.Primary
    OnVisible: |
        =Set(
            isLoading,
            true
        );
        If(
            !IsBlank(SelectedFile),
            IfError(
                UpdateContext(
                    {
                        xmlData: (ParseJSON(
                            GetXml.Run(
                                SelectedFile,
                                SelectedQueue
                            ).response
                        ).Transfer_Header )
                    }
                ),
                Notify(
                    "Gre≈°ka u obradi.",
                    NotificationType.Error,
                    2000
                )
            )
        );
        UpdateContext(
            {
                header: {
                    'No.': Text(xmlData.'No.'),
                    'Transfer-from_Code': Text(xmlData.'Transfer-from_Code'),
                    'Transfer-from_Name': Text(xmlData.'Transfer-from_Name'),
                    'Transfer-to_Code': Text(xmlData.'Transfer-to_Code'),
                    'Transfer-to_Name': Text(xmlData.'Transfer-to_Name'),
                    'In-Transit_Code': Text(xmlData.'In-Transit_Code'),
                    Gen_Bus_Posting_Group: Text(xmlData.Gen_Bus_Posting_Group),
                    Posting_Date: Text(xmlData.Posting_Date),
                    Status: Text(xmlData.Status),
                    Shipment_Date: Text(xmlData.Shipment_Date),
                    Receipt_Date: Text(xmlData.Receipt_Date),
                    Shipping_Advice: Text(xmlData.Shipping_Advice),
                    'Transfer-from_Post_Code': Text(xmlData.'Transfer-from_Post_Code'),
                    'Transfer-from_City': Text(xmlData.'Transfer-from_City'),
                    'Transfer-to_Post_Code': Text(xmlData.'Transfer-to_Post_Code'),
                    'Transfer-to_City': Text(xmlData.'Transfer-to_City'),
                    Shortcut_Dimension_1_Code: Text(xmlData.Shortcut_Dimension_1_Code)
                }
            }
        );
        IfError(
            ForAll(
                xmlData.Transfer_Line As line,
                Collect(
                    colLines,
                    {
                        Document_No: Text(line.Document_No),
                        Line_No: Text(line.Line_No),
                        Item_No: Text(line.Item_No),
                        'Transfer-from_Code': Text(line.'Transfer-from_Code'),
                        'Transfer-to_Code': Text(line.'Transfer-to_Code'),
                        'In-Transit_Code': Text(line.'In-Transit_Code'),
                        GP_Posting_Group: Text(line.GP_Posting_Group),
                        Inv_Posting_Group: Text(line.Inv_Posting_Group),
                        Description: Text(line.Description),
                        Unit_Of_Measure: Text(line.Unit_Of_Measure),
                        Quantity: Text(line.Quantity),
                        Quantity_Base: Text(line.Quantity_Base),
                        'Qty-to_Ship': Text(line.'Qty-to_Ship'),
                        'Qty-to_Receive': Text(line.'Qty-to_Receive'),
                        Quantity_Shipped: Text(line.Quantity_Shipped),
                        Quantity_Received: Text(line.Quantity_Received),
                        Outstanding_Qty: Text(line.Outstanding_Qty),
                        Shipment_Date: Text(line.Shipment_Date),
                        Receipt_Date: Text(line.Receipt_Date)
                    }
                );
                IfError(
                    ForAll(
                        line.Res_Entry As entry,
                        Collect(
                            colEntries,
                            {
                                Created_By: Text(entry.Created_By),
                                Creation_Date: Text(entry.Creation_Date),
                                Entry_No: Text(entry.Entry_No),
                                Exp_Date: Text(entry.Exp_Date),
                                Exp_Receipt_Date: Text(entry.Exp_Receipt_Date),
                                Item_No: Text(entry.Item_No),
                                Item_Tracking: Text(entry.Item_Tracking),
                                LOT_No: Text(entry.LOT_No),
                                Location_Code: Text(entry.Location_Code),
                                Positive: Text(entry.Positive),
                                'Qty-to-Handle_Base': Text(entry.'Qty-to-Handle_Base'),
                                'Qty-to-Invoice_Base': Text(entry.'Qty-to-Invoice_Base'),
                                Quantity: Text(entry.Quantity),
                                Quantity_Base: Text(entry.Quantity_Base),
                                Quantity_Completed: Value(entry.Quantity_Completed),
                                Quantity_NewLOT: Value(entry.Quantity_NewLOT),
                                Res_Status: Text(entry.Res_Status),
                                Shipment_Date: Text(entry.Shipment_Date),
                                Source_ID: Text(entry.Source_ID),
                                Source_Ref_No: Text(entry.Source_Ref_No),
                                Source_SubType: Text(entry.Source_SubType),
                                Source_Type: Text(entry.Source_Type)
                            }
                        )
                    ),
                    Collect(
                        colEntries,
                        {
                            Created_By: Text(line.Res_Entry.Created_By),
                            Creation_Date: Text(line.Res_Entry.Creation_Date),
                            Entry_No: Text(line.Res_Entry.Entry_No),
                            Exp_Date: Text(line.Res_Entry.Exp_Date),
                            Exp_Receipt_Date: Text(line.Res_Entry.Exp_Receipt_Date),
                            Item_No: Text(line.Res_Entry.Item_No),
                            Item_Tracking: Text(line.Res_Entry.Item_Tracking),
                            LOT_No: Text(line.Res_Entry.LOT_No),
                            Location_Code: Text(line.Res_Entry.Location_Code),
                            Positive: Text(line.Res_Entry.Positive),
                            'Qty-to-Handle_Base': Text(line.Res_Entry.'Qty-to-Handle_Base'),
                            'Qty-to-Invoice_Base': Text(line.Res_Entry.'Qty-to-Invoice_Base'),
                            Quantity: Text(line.Res_Entry.Quantity),
                            Quantity_Base: Text(line.Res_Entry.Quantity_Base),
                            Quantity_Completed: Value(line.Res_Entry.Quantity_Completed),
                            Quantity_NewLOT: Value(line.Res_Entry.Quantity_NewLOT),
                            Res_Status: Text(line.Res_Entry.Res_Status),
                            Shipment_Date: Text(line.Res_Entry.Shipment_Date),
                            Source_ID: Text(line.Res_Entry.Source_ID),
                            Source_Ref_No: Text(line.Res_Entry.Source_Ref_No),
                            Source_SubType: Text(line.Res_Entry.Source_SubType),
                            Source_Type: Text(line.Res_Entry.Source_Type)
                        }
                    )
                )
            ),
            Collect(
                colLines,
                {
                    Document_No: Text(xmlData.Transfer_Line.Document_No),
                    Line_No: Text(xmlData.Transfer_Line.Line_No),
                    Item_No: Text(xmlData.Transfer_Line.Item_No),
                    'Transfer-from_Code': Text(xmlData.Transfer_Line.'Transfer-from_Code'),
                    'Transfer-to_Code': Text(xmlData.Transfer_Line.'Transfer-to_Code'),
                    'In-Transit_Code': Text(xmlData.Transfer_Line.'In-Transit_Code'),
                    GP_Posting_Group: Text(xmlData.Transfer_Line.GP_Posting_Group),
                    Inv_Posting_Group: Text(xmlData.Transfer_Line.Inv_Posting_Group),
                    Description: Text(xmlData.Transfer_Line.Description),
                    Unit_Of_Measure: Text(xmlData.Transfer_Line.Unit_Of_Measure),
                    Quantity: Text(xmlData.Transfer_Line.Quantity),
                    Quantity_Base: Text(xmlData.Transfer_Line.Quantity_Base),
                    'Qty-to_Ship': Text(xmlData.Transfer_Line.'Qty-to_Ship'),
                    'Qty-to_Receive': Text(xmlData.Transfer_Line.'Qty-to_Receive'),
                    Quantity_Shipped: Text(xmlData.Transfer_Line.Quantity_Shipped),
                    Quantity_Received: Text(xmlData.Transfer_Line.Quantity_Received),
                    Outstanding_Qty: Text(xmlData.Transfer_Line.Outstanding_Qty),
                    Shipment_Date: Text(xmlData.Transfer_Line.Shipment_Date),
                    Receipt_Date: Text(xmlData.Transfer_Line.Receipt_Date)
                }
            );
            IfError(
                ForAll(
                    xmlData.Purchase_Line.Res_Entry As entry,
                    Collect(
                        colEntries,
                        {
                            Created_By: Text(entry.Created_By),
                            Creation_Date: Text(entry.Creation_Date),
                            Entry_No: Text(entry.Entry_No),
                            Exp_Date: Text(entry.Exp_Date),
                            Exp_Receipt_Date: Text(entry.Exp_Receipt_Date),
                            Item_No: Text(entry.Item_No),
                            Item_Tracking: Text(entry.Item_Tracking),
                            LOT_No: Text(entry.LOT_No),
                            Location_Code: Text(entry.Location_Code),
                            Positive: Text(entry.Positive),
                            'Qty-to-Handle_Base': Text(entry.'Qty-to-Handle_Base'),
                            'Qty-to-Invoice_Base': Text(entry.'Qty-to-Invoice_Base'),
                            Quantity: Text(entry.Quantity),
                            Quantity_Base: Text(entry.Quantity_Base),
                            Quantity_Completed: Value(entry.Quantity_Completed),
                            Quantity_NewLOT: Value(entry.Quantity_NewLOT),
                            Res_Status: Text(entry.Res_Status),
                            Shipment_Date: Text(entry.Shipment_Date),
                            Source_ID: Text(entry.Source_ID),
                            Source_Ref_No: Text(entry.Source_Ref_No),
                            Source_SubType: Text(entry.Source_SubType),
                            Source_Type: Text(entry.Source_Type)
                        }
                    )
                ),
                Collect(
                    colEntries,
                    {
                        Created_By: Text(xmlData.Transfer_Line.Res_Entry.Created_By),
                        Creation_Date: Text(xmlData.Transfer_Line.Res_Entry.Creation_Date),
                        Entry_No: Text(xmlData.Transfer_Line.Res_Entry.Entry_No),
                        Exp_Date: Text(xmlData.Transfer_Line.Res_Entry.Exp_Date),
                        Exp_Receipt_Date: Text(xmlData.Transfer_Line.Res_Entry.Exp_Receipt_Date),
                        Item_No: Text(xmlData.Transfer_Line.Res_Entry.Item_No),
                        Item_Tracking: Text(xmlData.Transfer_Line.Res_Entry.Item_Tracking),
                        LOT_No: Text(xmlData.Transfer_Line.Res_Entry.LOT_No),
                        Location_Code: Text(xmlData.Transfer_Line.Res_Entry.Location_Code),
                        Positive: Text(xmlData.Transfer_Line.Res_Entry.Positive),
                        'Qty-to-Handle_Base': Text(xmlData.Transfer_Line.Res_Entry.'Qty-to-Handle_Base'),
                        'Qty-to-Invoice_Base': Text(xmlData.Transfer_Line.Res_Entry.'Qty-to-Invoice_Base'),
                        Quantity: Text(xmlData.Transfer_Line.Res_Entry.Quantity),
                        Quantity_Base: Text(xmlData.Transfer_Line.Res_Entry.Quantity_Base),
                        Quantity_Completed: Value(xmlData.Transfer_Line.Res_Entry.Quantity_Completed),
                        Quantity_NewLOT: Value(xmlData.Transfer_Line.Res_Entry.Quantity_NewLOT),
                        Res_Status: Text(xmlData.Transfer_Line.Res_Entry.Res_Status),
                        Shipment_Date: Text(xmlData.Transfer_Line.Res_Entry.Shipment_Date),
                        Source_ID: Text(xmlData.Transfer_Line.Res_Entry.Source_ID),
                        Source_Ref_No: Text(xmlData.Transfer_Line.Res_Entry.Source_Ref_No),
                        Source_SubType: Text(xmlData.Transfer_Line.Res_Entry.Source_SubType),
                        Source_Type: Text(xmlData.Transfer_Line.Res_Entry.Source_Type)
                    }
                )
            )
        );
        Set(
            isLoading,
            false
        );
        If(
            SelectedQueue = ReadyForProcessing,
            ChangeXmlStatus.Run(
                SelectedFile,
                SelectedQueue,
                InProgress
            );
            Set(
                SelectedQueue,
                InProgress
            )
        );

    vrt_Pre As groupContainer.verticalAutoLayoutContainer:
        DropShadow: =DropShadow.Light
        Fill: =RGBA(245, 245, 245, 1)
        Height: =Parent.Height
        LayoutAlignItems: =LayoutAlignItems.Stretch
        LayoutDirection: =LayoutDirection.Vertical
        LayoutMode: =LayoutMode.Auto
        RadiusBottomLeft: =4
        RadiusBottomRight: =4
        RadiusTopLeft: =4
        RadiusTopRight: =4
        Width: =Parent.Width
        ZIndex: =1

        com_PreHeader As com_Header:
            LayoutMinHeight: =640
            LayoutMinWidth: =App.Width
            Title: ="NALOG ZA PRENOS"

        vrt_PreBody As groupContainer.verticalAutoLayoutContainer:
            AlignInContainer: =AlignInContainer.SetByContainer
            LayoutAlignItems: =LayoutAlignItems.Stretch
            LayoutDirection: =LayoutDirection.Vertical
            LayoutJustifyContent: =LayoutJustifyContent.SpaceBetween
            LayoutMinHeight: =100
            LayoutMinWidth: =App.Width
            LayoutMode: =LayoutMode.Auto
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            RadiusBottomLeft: =4
            RadiusBottomRight: =4
            RadiusTopLeft: =4
            RadiusTopRight: =4
            Visible: =!isLoading
            ZIndex: =2

            com_PreHeaderData As com_HeaderData:
                LayoutMinHeight: =640
                LayoutMinWidth: =375
                Line1Label: |-
                    ="Broj naloga:"
                Line1Value: =header.'No.'
                Line2Label: |-
                    ="Datum slanja:"
                Line2Value: =header.Shipment_Date
                Line3Label: |-
                    ="Datum primanja:"
                Line3Value: =header.Receipt_Date
                Line4Label: |-
                    ="Prenos iz:"
                Line4Value: =header.'Transfer-from_Code' & " " & header.'Transfer-from_Name'
                Line5Label: |-
                    ="Prenos u:"
                Line5Value: =header.'Transfer-to_Code' & " " & header.'Transfer-to_Name'
                Visible: =wizardStep = 1
                Width: |
                    =App.Width

            com_PreGalleries As com_Galleries:
                EntryLabels: |-
                    ={Line1: "Broj artikla:", Line2: "Rok trajanja:", Line3: "LOT:", Line4: "Rezervisana koliƒçina:", Line5: "Potrebna koliƒçina:"}
                FillPortions: =1
                LayoutMinWidth: =375
                LineLabels: |-
                    ={Line1: "Broj artikla:", Line2: "Kategorija artikla:", Line3: "Naziv artikla:", Line4: "Koliƒçina:", Line5: "Koliƒçina za slanje:"}
                Visible: =true
                ZIndex: =2

        spn_PreLoading As Spinner:
            BasePaletteColor: =
            DisplayMode: =DisplayMode.Edit
            FillPortions: =1
            FontColor: =
            Height: =200
            Label: ="Uƒçitavam dokument..."
            LabelPosition: ='Spinner.LabelPosition'.Below
            LayoutMinHeight: =200
            LayoutMinWidth: =350
            SpinnerSize: ='Spinner.SpinnerSize'.Huge
            Visible: =isLoading
            Width: =200
            X: =0
            Y: =0
            ZIndex: =3

        com_PreFooter As com_Footer:
            JSONData: |-
                ="{" & Char(34) & "Transfer_Header" & Char(34) & ": " & JSON(
                    AddColumns(
                        header,
                        Transfer_Line,
                        ForAll(
                            colLines As line,
                            AddColumns(
                                line,
                                Res_Entry,
                                Filter(
                                    colEntries,
                                    ThisRecord.Source_Ref_No = line.Line_No
                                )
                            )
                        )
                    )
                ) & "}"
            LayoutMinHeight: =640
            ZIndex: =4

    com_PreModal As com_Modal:
        IsInventura: =false
        LineId: =com_PreGalleries.SelectedLine.Line_No
        Quantity: =Abs(com_PreGalleries.SelectedEntry.Quantity)
        QuantityCompleted: =Abs(com_PreGalleries.SelectedEntry.Quantity_Completed)
        QuantityNewLOT: =Abs(com_PreGalleries.SelectedEntry.Quantity_NewLOT)
        ResEntryId: =com_PreGalleries.SelectedEntry.Entry_No
        Visible: =isModalOpen
        ZIndex: =3

