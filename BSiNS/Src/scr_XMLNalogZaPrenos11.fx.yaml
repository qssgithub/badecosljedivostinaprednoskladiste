"scr_XMLNalogZaPrenos11 As screen.'autoLayout_HeaderFooter_ver1.0'":
    Fill: =RGBA(234, 83, 109, 1)
    LoadingSpinnerColor: =RGBA(164, 38, 44, 1)
    OnVisible: |-
        =Reset(nalogZaPrenosReadyForNavCheckbox);
        If(!IsBlank(SelectedFile),
        IfError(GetXML_Nalog_Za_Prenos.Run(SelectedFile,SelectedFolder),
            Notify(
                "Error occurred while Get request, check if file exists.",
                NotificationType.Error,
                5000
            ),
            UpdateContext({transfer:GetXML_Nalog_Za_Prenos.Run(SelectedFile,SelectedFolder)})
        );
        
        UpdateContext({transfer_header: ParseJSON(transfer.transfer_header)});
        UpdateContext({transfer_lines:transfer.transfer_line});
        UpdateContext({transfer_res_entry:transfer.res_entry});
        
        Clear(colTransferLines);
        Clear(colResEntries);
        
        ForAll(
            ParseJSON(transfer_lines),
            Collect(
                colTransferLines,
                {
                    Document_No: Text(ThisRecord.Document_No),
                    Line_No: Text(ThisRecord.Line_No),
                    Item_No: Text(ThisRecord.Item_No),
                    'Transfer-from_Code': Text(ThisRecord.'Transfer-from_Code'),
                    'Transfer-to_Code': Text(ThisRecord.'Transfer-to_Code'),
                    'In-Transit_Code': Text(ThisRecord.'In-Transit_Code'),
                    GP_Posting_Group: Text(ThisRecord.GP_Posting_Group),
                    Inv_Posting_Group: Text(ThisRecord.Inv_Posting_Group),
                    Description: Text(ThisRecord.Description),
                    Unit_Of_Measure: Text(ThisRecord.Unit_Of_Measure),
                    Quantity: Value(ThisRecord.Quantity),
                    Quantity_Base: Value(ThisRecord.Quantity_Base),
                    'Qty-to_Ship': Value(ThisRecord.'Qty-to_Ship'),
                    'Qty-to_Receive': Value(ThisRecord.'Qty-to_Receive'),
                    Quantity_Shipped: Value(ThisRecord.Quantity_Shipped),
                    Quantity_Received: Value(ThisRecord.Quantity_Received),
                    Outstanding_Qty: Value(ThisRecord.Outstanding_Qty),
                    Shipment_Date: Text(ThisRecord.Shipment_Date),
                    Receipt_Date: Text(ThisRecord.Receipt_Date)
                }
            );
        );
        
        ForAll(
            ParseJSON(transfer_res_entry),
            Collect(
                colResEntries,
                    {
                        Entry_No: Text(ThisRecord.Entry_No),
                        Item_No: Text(ThisRecord.Item_No),
                        Positive: Text(ThisRecord.Positive),
                        Quantity: Value(ThisRecord.Quantity),
                        Quantity_Base: Value(ThisRecord.Quantity_Base),
                        Location_Code: Text(ThisRecord.Location_Code),
                        Res_Status: Text(ThisRecord.Res_Status),
                        Source_Type: Text(ThisRecord.Source_Type),
                        Source_SubType: Text(ThisRecord.Source_SubType),
                        Source_ID: Text(ThisRecord.Source_ID),
                        Source_Ref_No: Text(ThisRecord.Source_Ref_No),
                        Item_Tracking: Text(ThisRecord.Item_Tracking),
                        LOT_No: Text(ThisRecord.LOT_No),
                        Exp_Date: Text(ThisRecord.Exp_Date),
                        Creation_Date: Text(ThisRecord.Creation_Date),
                        Exp_Receipt_Date: Text(ThisRecord.Exp_Receipt_Date),
                        Shipment_Date: Text(ThisRecord.Shipment_Date),
                        Created_By: Text(ThisRecord.Created_By),
                        'Qty-to-Handle_Base': Value(ThisRecord.'Qty-to-Handle_Base'),
                        'Qty-to-Invoice_Base': Value(ThisRecord.'Qty-to-Invoice_Base')
                    }
            )
        );
        
        ClearCollect(
            colOriginalTransferLines,
            colTransferLines
        );)
        //za reset

    NalogZaPrenosScreenContainer As groupContainer.verticalAutoLayoutContainer:
        DropShadow: =DropShadow.Light
        Fill: =RGBA(245, 245, 245, 1)
        Height: =Parent.Height
        LayoutAlignItems: =LayoutAlignItems.Stretch
        LayoutDirection: =LayoutDirection.Vertical
        LayoutGap: =16
        LayoutMode: =LayoutMode.Auto
        PaddingBottom: =16
        PaddingLeft: =16
        PaddingRight: =16
        PaddingTop: =16
        RadiusBottomLeft: =4
        RadiusBottomRight: =4
        RadiusTopLeft: =4
        RadiusTopRight: =4
        Width: =Parent.Width
        ZIndex: =1

    "'Upload xml file_2' As group":
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =9

    saveXml_2 As button:
        DisabledBorderColor: =RGBA(166, 166, 166, 1)
        DisabledColor: =RGBA(166, 166, 166, 1)
        DisabledFill: =RGBA(244, 244, 244, 1)
        DisplayMode: |-
            =//If(!IsBlank(purchase_header) || !IsBlank(purchase_line), DisplayMode.Edit, DisplayMode.Disabled)
            DisplayMode.Edit
        Fill: =RGBA(164, 38, 44, 1)
        FontWeight: =FontWeight.Semibold
        Height: =50
        HoverColor: =RGBA(255, 255, 255, 1)
        HoverFill: =ColorFade(RGBA(164, 38, 44, 1), -20%)
        OnSelect: |
            =UpdateContext({
                transferJsonData:
                JSON(
                    {
                        Transfer_Header: {
                            'No.': Text(transfer_header.'No.'),
                            'Transfer-from_Code': Text(transfer_header.'Transfer-from_Code'),
                            'Transfer-from_Name': Text(transfer_header.'Transfer-from_Name'),
                            'Transfer-to_Code': Text(transfer_header.'Transfer-to_Code'),
                            'Transfer-to_Name': Text(transfer_header.'Transfer-to_Name'),
                            'In-Transit_Code': Text(transfer_header.'In-Transit_Code'),
                            Gen_Bus_Posting_Group: Text(transfer_header.Gen_Bus_Posting_Group),
                            Posting_Date: Text(transfer_header.Posting_Date),
                            Status: Text(transfer_header.Status),
                            Shipment_Date: Text(transfer_header.Shipment_Date),
                            Receipt_Date: Text(transfer_header.Receipt_Date),
                            Shipping_Advice: Text(transfer_header.Shipping_Advice),
                            'Transfer-from_Post_Code': Text(transfer_header.'Transfer-from_Post_Code'),
                            'Transfer-from_City': Text(transfer_header.'Transfer-from_City'),
                            'Transfer-to_Post_Code': Text(transfer_header.'Transfer-to_Post_Code'),
                            'Transfer-to_City': Text(transfer_header.'Transfer-to_City'),
                            Shortcut_Dimension_1_Code: Text(transfer_header.Shortcut_Dimension_1_Code),
                            Transfer_Line: ForAll(colTransferLines As tl, 
                                {
                                    Document_No: Text(tl.Document_No),
                                    Line_No: Text(tl.Line_No),
                                    Item_No: Text(tl.Item_No),
                                    'Transfer-from_Code': Text(tl.'Transfer-from_Code'),
                                    'Transfer-to_Code': Text(tl.'Transfer-to_Code'),
                                    'In-Transit_Code': Text(tl.'In-Transit_Code'),
                                    GP_Posting_Group: Text(tl.GP_Posting_Group),
                                    Inv_Posting_Group: Text(tl.Inv_Posting_Group),
                                    Description: Text(tl.Description),
                                    Unit_Of_Measure: Text(tl.Unit_Of_Measure),
                                    Quantity: Text(tl.Quantity),
                                    Quantity_Base: Text(tl.Quantity_Base),
                                    'Qty-to_Ship': Text(tl.'Qty-to_Ship'),
                                    'Qty-to_Receive': Text(tl.'Qty-to_Receive'),
                                    Quantity_Shipped: Text(tl.Quantity_Shipped),
                                    Quantity_Received: Text(tl.Quantity_Received),
                                    Outstanding_Qty: Text(tl.Outstanding_Qty),
                                    Shipment_Date: Text(tl.Shipment_Date),
                                    Receipt_Date: Text(tl.Receipt_Date),
                                    Res_Entry: ForAll(Filter(colResEntries, ThisRecord.Item_No = tl.Item_No),
                                    {
                                        Created_By: Text(Created_By),
                                        Creation_Date: Text(Creation_Date),
                                        Entry_No: Text(Entry_No),
                                        Exp_Date: Text(Exp_Date),
                                        Exp_Receipt_Date: Text(Exp_Receipt_Date),
                                        Item_No: Text(Item_No),
                                        Item_Tracking: Text(Item_Tracking),
                                        LOT_No: Text(LOT_No),
                                        Location_Code: Text(Location_Code),
                                        Positive: Text(Positive),
                                        'Qty-to-Handle_Base': Text('Qty-to-Handle_Base'),
                                        'Qty-to-Invoice_Base': Text('Qty-to-Invoice_Base'),
                                        Quantity: Text(Quantity),
                                        Quantity_Base: Text(Quantity_Base),
                                        Res_Status: Text(Res_Status),
                                        Shipment_Date: Text(Shipment_Date),
                                        Source_ID: Text(Source_ID),
                                        Source_Ref_No: Text(Source_Ref_No),
                                        Source_SubType: Text(Source_SubType),
                                        Source_Type: Text(Source_Type)
                                    }) 
                                }
                            )
                        }
                    },JSONFormat.IgnoreUnsupportedTypes
                )
            });
            
            If(!isCreated,UpdateXML.Run(transferJsonData, SelectedFile, SelectedFolder, nalogZaPrenosReadyForNavCheckbox.Checked));
            
            Navigate(scrEntry,ScreenTransition.Fade);
        Size: =15
        Text: ="Save"
        Width: =225
        X: =543
        Y: =704
        ZIndex: =15

    "'Get xml file by name_2' As group":
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =15

